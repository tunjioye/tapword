{"version":3,"sources":["components/Cell.js","components/Row.js","components/Score.js","components/Selection.js","components/Sidebar.js","config.js","spellcheck.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Cell","react_default","a","createElement","className","this","props","cell","cellName","onClick","letter","charAt","React","Component","defaultProps","Row","rowLetters","i","size","components_Cell","key","toString","rowNumber","letters","Score","output","score","length","id","Selection","word","Sidebar","timer","endless","data-tooltip","minutes","multiplier","handleUndoButtonClick","handleSubmitButtonClick","config","SPELLCHECK_API_KEY","spellcheck","axios","create","baseURL","headers","X-RapidAPI-Key","Grid","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","rows","lastWordScore","cellToggle","shuffle","shuffleAll","randomLetters","bind","assertThisInitialized","handleCellClick","pushSelectionWord","popSelectionWord","handleKeyUp","submitWord","updateMultiplier","updateScore","clearSelectionWord","resetSelectedCells","shuffleCells","chars","toConsumableArray","Array","parseInt","map","x","Math","floor","random","join","e","target","getAttribute","filter","setState","classList","toggle","innerHTML","add","document","querySelectorAll","remove","newWordScore","wordScore","selectedCells","forEach","toLowerCase","get","then","response","undefined","data","corrections","getElementById","setTimeout","catch","error","console","log","finally","keyCode","preventDefault","addEventListener","generate","components_Row","components_Score","components_Selection","components_Sidebar","App","components_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAEMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAYC,KAAKC,MAAMF,UAAa,QAAUC,KAAKC,MAAMF,UAAY,OACrEG,KAAMF,KAAKC,MAAME,SACjBC,QAASJ,KAAKC,MAAMG,SAEnBJ,KAAKC,MAAMI,OAAOC,OAAO,WARfC,IAAMC,WAczBb,EAAKc,aAAe,CAClBJ,OAAQ,IAGKV,QCjBTe,mLAGF,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIZ,KAAKC,MAAMY,KAAMD,IACnCD,EAAWC,GAAKhB,EAAAC,EAAAC,cAACgB,EAAD,CACdC,IAAKH,EAAEI,WACPb,SAAU,KAAQH,KAAKC,MAAMgB,UAAYjB,KAAKC,MAAMY,KAAQD,GAC5DP,OAASL,KAAKC,MAAMiB,QAAQN,GAAMZ,KAAKC,MAAMiB,QAAQN,GAAK,IAC1DR,QAASJ,KAAKC,MAAMG,UAExB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,KAAKC,MAAMF,UAAa,OAASC,KAAKC,MAAMF,UAAY,OACtEY,UAZSJ,IAAMC,WAmBxBE,EAAID,aAAe,CACjBI,KAAM,EACNK,QAAS,SAGIR,QCxBTS,mLAIF,IAFA,IAAIC,EAAS,GACTC,EAAQrB,KAAKC,MAAMoB,MAAML,WACpBJ,EAAI,EAAGA,EAAIS,EAAMC,OAAQV,IAChCQ,EAAOR,GAAKhB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKH,EAAEI,WAAYX,OAASgB,EAAMT,GAAMS,EAAMT,GAAK,MAEvE,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,SACAH,EAAAC,EAAAC,cAAA,QAAMyB,GAAG,SAASH,WAVNb,IAAMC,WAgB1BW,EAAMV,aAAe,CACnBY,MAAO,GAGMF,QCpBTK,mLAGF,IADA,IAAIJ,EAAS,GACJR,EAAI,EAAGA,EAAIZ,KAAKC,MAAMwB,KAAKH,OAAQV,IAC1CQ,EAAOR,GAAKhB,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKH,EAAEI,WAAYX,OAASL,KAAKC,MAAMwB,KAAKb,GAAMZ,KAAKC,MAAMwB,KAAKb,GAAK,MAE3F,OACEhB,EAAAC,EAAAC,cAAA,OAAKyB,GAAG,YAAYxB,UAAU,aAC5BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,cACAH,EAAAC,EAAAC,cAAA,QAAMyB,GAAG,QAAQH,WATDb,IAAMC,WAe9BgB,EAAUf,aAAe,CACvBgB,KAAM,IAGOD,QCpBTE,mLAEF,IAAIC,EAMJ,OAJEA,EADE3B,KAAKC,MAAM2B,QACLhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB8B,eAAa,SAAjD,UAEAjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB8B,eAAa,SAAS7B,KAAKC,MAAM6B,QAAQlC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,MAGrFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB8B,eAAa,oBAAmBjC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,KAAoCH,EAAAC,EAAAC,cAAA,QAAMyB,GAAG,cAAcvB,KAAKC,MAAM8B,cAE5InC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZ4B,GAEH/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB8B,eAAa,aAAjD,SAAoEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,KAAKC,MAAMY,QAE7GjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQyB,GAAG,OAAOxB,UAAU,iBAAiBK,QAASJ,KAAKC,MAAM+B,sBAAuBH,eAAa,aAArG,WAEFjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQyB,GAAG,SAASxB,UAAU,iBAAiBK,QAASJ,KAAKC,MAAMgC,wBAAyBJ,eAAa,eAAzG,mBAvBYtB,IAAMC,WA8B5BkB,EAAQjB,aAAe,CACrBI,KAAM,EACNiB,QAAS,EACTC,WAAY,EACZH,SAAS,GAGIF,gBCnCAQ,EAJF,CACXC,mBAAoB,sDCSPC,SAPIC,EAAMC,OAAO,CAC9BC,QAAS,wDACTC,QAAS,CACPC,iBAAkBP,EAAOC,sBCCvBO,cACJ,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5C,KAAA0C,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5C,KAAA4C,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhD,KAAMC,KACDgD,MAAQ,CACXpC,KAAMZ,EAAMY,KACZqC,KAAMjD,EAAMiD,KACZnB,WAAY9B,EAAM8B,WAClBH,QAAS3B,EAAM2B,QACfP,MAAOpB,EAAMoB,MACb8B,cAAelD,EAAMkD,cACrB1B,KAAMxB,EAAMwB,KACZ2B,WAAYnD,EAAMmD,WAClBC,QAASpD,EAAMoD,QACfC,WAAYrD,EAAMqD,YAEpBX,EAAKY,cAAgBZ,EAAKY,cAAcC,KAAnBZ,OAAAa,EAAA,EAAAb,CAAAD,IACrBA,EAAKe,gBAAkBf,EAAKe,gBAAgBF,KAArBZ,OAAAa,EAAA,EAAAb,CAAAD,IACvBA,EAAKgB,kBAAoBhB,EAAKgB,kBAAkBH,KAAvBZ,OAAAa,EAAA,EAAAb,CAAAD,IACzBA,EAAKiB,iBAAmBjB,EAAKiB,iBAAiBJ,KAAtBZ,OAAAa,EAAA,EAAAb,CAAAD,IACxBA,EAAKkB,YAAclB,EAAKkB,YAAYL,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IACnBA,EAAKmB,WAAanB,EAAKmB,WAAWN,KAAhBZ,OAAAa,EAAA,EAAAb,CAAAD,IAClBA,EAAKoB,iBAAmBpB,EAAKoB,iBAAiBP,KAAtBZ,OAAAa,EAAA,EAAAb,CAAAD,IACxBA,EAAKqB,YAAcrB,EAAKqB,YAAYR,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IACnBA,EAAKsB,mBAAqBtB,EAAKsB,mBAAmBT,KAAxBZ,OAAAa,EAAA,EAAAb,CAAAD,IAC1BA,EAAKuB,mBAAqBvB,EAAKuB,mBAAmBV,KAAxBZ,OAAAa,EAAA,EAAAb,CAAAD,IAC1BA,EAAKwB,aAAexB,EAAKwB,aAAaX,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IAxBHA,+EA6BjB,IAFA,IAAMyB,EAAKxB,OAAAyB,EAAA,EAAAzB,CAAO,8BACd1B,EAAU,GACLN,EAAI,EAAGA,EAAIZ,KAAKiD,MAAMpC,KAAMD,IACnCM,EAAQN,GAAKgC,OAAAyB,EAAA,EAAAzB,CAAI0B,MAAMC,SAASvE,KAAKiD,MAAMpC,QAAQ2D,IAAI,SAAAC,GAAC,OAAIL,EAAiD,EAA3CM,KAAKC,MAAMD,KAAKE,SAAWR,EAAM9C,WAAcuD,KAAK,IAExH,OAAO3D,0CAEO4D,GACd,IAAI5E,EAAO4E,EAAEC,OACT5E,EAAWD,EAAK8E,aAAa,QAC7BvD,EAAOzB,KAAKiD,MAAMxB,KAClBzB,KAAKiD,MAAMG,WAEwC,IAAjD3B,EAAKwD,OAAO,SAAAR,GAAC,OAAIA,EAAEvE,OAASC,IAAUmB,OACxCtB,KAAK2D,kBAAkBzD,IAEvBuB,EAAOA,EAAKwD,OAAO,SAAAR,GAAC,OAAIA,EAAEvE,OAASC,IACnCH,KAAKkF,SAAS,CACZzD,KAAMA,IAERvB,EAAKiF,UAAUC,OAAO,aAI6B,IAAjD3D,EAAKwD,OAAO,SAAAR,GAAC,OAAIA,EAAEvE,OAASC,IAAUmB,OACxCtB,KAAK2D,kBAAkBzD,GACduB,EAAKA,EAAKH,OAAS,GAAGpB,OAASC,GACxCH,KAAK4D,6DAIO1D,GAChB,IAAIC,EAAWD,EAAK8E,aAAa,QAC7BvD,EAAOzB,KAAKiD,MAAMxB,KACtBA,EAAKA,EAAKH,QAAU,CAClBpB,KAAMC,EACNE,OAAQH,EAAKmF,WAEfnF,EAAKiF,UAAUG,IAAI,YACnBtF,KAAKkF,SAAS,CACZzD,KAAMA,+CAIR,GAAIzB,KAAKiD,MAAMxB,KAAKH,OAAS,EAAG,CAC9B,IAAIG,EAAOzB,KAAKiD,MAAMxB,KACtB8D,SAASC,iBAAiB,SAAW/D,EAAKA,EAAKH,OAAS,GAAGpB,KAAO,KAAK,GAAGiF,UAAUM,OAAO,YAC3FhE,EAAKH,SACLtB,KAAKkF,SAAS,CACZzD,KAAMA,kDAKVzB,KAAKkF,SAAS,CACZzD,KAAM,8CAGOiE,GACf,GAAI1F,KAAKiD,MAAME,cAAgB,EAAG,CAChC,IAAIA,EAAgBnD,KAAKiD,MAAME,cAC3BpB,EAAa/B,KAAKiD,MAAMlB,WACxB2D,EAAevC,EACjBpB,IACS2D,EAAevC,GAAiBnD,KAAKiD,MAAMlB,WAAa,GACjEA,IAEF/B,KAAKkF,SAAS,CACZnD,WAAYA,yCAIN4D,GACV,IAAItE,EAAQrB,KAAKiD,MAAM5B,MACvBA,GAAUsE,EAAY3F,KAAKiD,MAAMlB,WACjC/B,KAAK+D,iBAAiB4B,GACtB3F,KAAKkF,SAAS,CACZ7D,MAAOA,EACP8B,cAAewC,iDAIjB,IAAIC,EAAgBL,SAASC,iBAAiB,2BAC9CI,EAAcC,QAAQ,SAAApB,GAAC,OAAIA,EAAEU,UAAUM,OAAO,cAC9CzF,KAAKmE,aAAayB,wCAEPA,GACX,GAAI5F,KAAKiD,MAAMI,QACb,GAAIrD,KAAKiD,MAAMK,WAEbtD,KAAKkF,SAAS,CACZhC,KAAMlD,KAAKuD,sBAER,CAEL,IAAMa,EAAKxB,OAAAyB,EAAA,EAAAzB,CAAO,8BAClBgD,EAAcC,QAAQ,SAAApB,GAAC,OAAIA,EAAEY,UAAYjB,EAAiD,EAA3CM,KAAKC,MAAMD,KAAKE,SAAWR,EAAM9C,iDAKpF,IAAIG,EAAOzB,KAAKiD,MAAMxB,KAAK+C,IAAI,SAAAC,GAAC,OAAIA,EAAEpE,SAAQwE,KAAK,IAAIiB,cACvD1D,EAAW2D,IAAI,SAAWtE,GACzBuE,KAAK,SAAUC,QAC0BC,IAApCD,EAASE,KAAKC,YAAY3E,IAC5BzB,KAAKgE,YAAYvC,EAAKH,QACtBtB,KAAKiE,qBACLjE,KAAKkE,uBAELqB,SAASc,eAAe,aAAalB,UAAUG,IAAI,SACnDgB,WAAW,WACTf,SAASc,eAAe,aAAalB,UAAUM,OAAO,UACrD,OAELjC,KAAKxD,OACNuG,MAAM,SAAUC,GACfC,QAAQC,IAAIF,KAEbG,QAAQ,kDAIC7B,GACV,OAAQA,EAAE8B,SAER,KAAK,EACH9B,EAAE+B,iBACF7G,KAAK4D,mBACL,MAEF,KAAK,GACHkB,EAAE+B,iBACF7G,KAAK8D,0DAOTyB,SAASuB,iBAAiB,QAAS9G,KAAK6D,aACpC7D,KAAKC,MAAM8G,UACb/G,KAAKkF,SAAS,CACZhC,KAAMlD,KAAKuD,mDAMf,IADA,IAAIL,EAAO,GACFtC,EAAI,EAAGA,EAAIZ,KAAKiD,MAAMpC,KAAMD,IACnCsC,EAAKtC,GAAKhB,EAAAC,EAAAC,cAACkH,EAAD,CACRjG,IAAKH,EAAEI,WACPC,UAAWL,EACXC,KAAMb,KAAKiD,MAAMpC,KACjBK,QAASlB,KAAKiD,MAAMC,KAAKtC,GACzBR,QAASJ,KAAK0D,kBAElB,OACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACmH,EAAD,CAAO5F,MAAOrB,KAAKiD,MAAM5B,QACzBzB,EAAAC,EAAAC,cAACoH,EAAD,CAAWzF,KAAMzB,KAAKiD,MAAMxB,KAAK+C,IAAI,SAAAC,GAAC,OAAIA,EAAEpE,WAC5CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZmD,GAEHtD,EAAAC,EAAAC,cAACqH,EAAD,CAASpF,WAAY/B,KAAKiD,MAAMlB,WAAYH,QAAS5B,KAAKiD,MAAMrB,QAASI,sBAAuBhC,KAAK4D,iBAAkB3B,wBAAyBjC,KAAK8D,qBA/L1IvD,IAAMC,WAqMzBkC,EAAKjC,aAAe,CAClBsG,UAAU,EACV3D,YAAY,EACZC,SAAS,EACTC,YAAY,EACZzC,KAAM,EACNqC,KAAM,CACJ,MACA,OACA,OACA,KACA,SAEFnB,WAAY,EACZH,SAAS,EACTP,MAAO,EACP8B,cAAe,EACf1B,KAAM,IAGOiB,QClNA0E,MAVf,WACE,OACExH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACuH,EAAD,CAAMjE,YAAY,EAAMC,SAAS,EAAMC,YAAY,EAAM1B,SAAS,OCItD0F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhI,EAAAC,EAAAC,cAAC+H,EAAD,MAAStC,SAASc,eAAe,SD2H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.9d97de81.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={(this.props.className) ? \"cell \" + this.props.className : \"cell\"}\r\n        cell={this.props.cellName}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.props.letter.charAt(0)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCell.defaultProps = {\r\n  letter: ''\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Row extends React.Component {\r\n  render() {\r\n    let rowLetters = [];\r\n    for (let i = 0; i < this.props.size; i++) {\r\n      rowLetters[i] = <Cell\r\n        key={i.toString()}\r\n        cellName={'c' + ((this.props.rowNumber * this.props.size) + i)}\r\n        letter={(this.props.letters[i]) ? this.props.letters[i] : ' '}\r\n        onClick={this.props.onClick} />\r\n    }\r\n    return (\r\n      <div className={(this.props.className) ? \"row \" + this.props.className : \"row\"}>\r\n        {rowLetters}\r\n        {/* <br /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRow.defaultProps = {\r\n  size: 5,\r\n  letters: 'TAPWD'\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Score extends React.Component {\r\n  render() {\r\n    let output = [];\r\n    let score = this.props.score.toString();\r\n    for (let i = 0; i < score.length; i++) {\r\n      output[i] = <Cell key={i.toString()} letter={(score[i]) ? score[i] : ' '} />\r\n    }\r\n    return (\r\n      <div className=\"selection\">\r\n        <span className=\"selection-info\">SCORE</span>\r\n        <span id=\"score\">{output}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nScore.defaultProps = {\r\n  score: 0\r\n}\r\n\r\nexport default Score\r\n\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Selection extends React.Component {\r\n  render() {\r\n    let output = [];\r\n    for (let i = 0; i < this.props.word.length; i++) {\r\n      output[i] = <Cell key={i.toString()} letter={(this.props.word[i]) ? this.props.word[i] : ' '} />\r\n    }\r\n    return (\r\n      <div id=\"selection\" className=\"selection\">\r\n        <span className=\"selection-info\">WORD INPUT</span>\r\n        <span id=\"word\">{output}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSelection.defaultProps = {\r\n  word: ''\r\n}\r\n\r\nexport default Selection\r\n\r\n","import React from 'react';\r\n\r\nclass Sidebar extends React.Component {\r\n  render() {\r\n    let timer;\r\n    if (this.props.endless) {\r\n      timer = <div className=\"button alt tooltip\" data-tooltip=\"Timer\">&infin;</div>;\r\n    } else {\r\n      timer = <div className=\"button alt tooltip\" data-tooltip=\"Timer\">{this.props.minutes}<span className=\"highlight\">m</span></div>;\r\n    }\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <div className=\"cell\">\r\n          <div className=\"button alt tooltip\" data-tooltip=\"Score Multiplier\"><span className=\"highlight\">x</span><span id=\"multiplier\">{this.props.multiplier}</span></div>\r\n        </div>\r\n        <div className=\"cell\">\r\n          {timer}\r\n        </div>\r\n        <div className=\"cell\">\r\n          <div className=\"button alt tooltip\" data-tooltip=\"Grid Size\">&#8862;<sub className=\"highlight\">{this.props.size}</sub></div>\r\n        </div>\r\n        <div className=\"cell\">\r\n          <button id=\"undo\" className=\"button tooltip\" onClick={this.props.handleUndoButtonClick} data-tooltip=\"Undo Word\">&#8630;</button>\r\n        </div>\r\n        <div className=\"cell\">\r\n          <button id=\"submit\" className=\"button tooltip\" onClick={this.props.handleSubmitButtonClick} data-tooltip=\"Submit Word\">&#8629;</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  size: 5,\r\n  minutes: 5,\r\n  multiplier: 1,\r\n  endless: false\r\n}\r\n\r\nexport default Sidebar;\r\n","let config = {\n  SPELLCHECK_API_KEY: '1c9ac1fe40mshe41e56796409b00p14b6a1jsn78518c7e15bc'\n}\n\nexport default config;","import axios from 'axios';\nimport config from './config';\n\nconst spellcheck = axios.create({\n  baseURL: 'https://montanaflynn-spellcheck.p.rapidapi.com/check/',\n  headers: {\n    'X-RapidAPI-Key': config.SPELLCHECK_API_KEY,\n  }\n});\n\nexport default spellcheck;\n","import React from 'react';\r\nimport Row from './Row';\r\nimport Score from './Score';\r\nimport Selection from './Selection';\r\nimport Sidebar from './Sidebar';\r\nimport spellcheck from './../spellcheck';\r\n\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      size: props.size,\r\n      rows: props.rows,\r\n      multiplier: props.multiplier,\r\n      endless: props.endless,\r\n      score: props.score,\r\n      lastWordScore: props.lastWordScore,\r\n      word: props.word,\r\n      cellToggle: props.cellToggle,\r\n      shuffle: props.shuffle,\r\n      shuffleAll: props.shuffleAll\r\n    }\r\n    this.randomLetters = this.randomLetters.bind(this)\r\n    this.handleCellClick = this.handleCellClick.bind(this)\r\n    this.pushSelectionWord = this.pushSelectionWord.bind(this)\r\n    this.popSelectionWord = this.popSelectionWord.bind(this)\r\n    this.handleKeyUp = this.handleKeyUp.bind(this)\r\n    this.submitWord = this.submitWord.bind(this)\r\n    this.updateMultiplier = this.updateMultiplier.bind(this)\r\n    this.updateScore = this.updateScore.bind(this)\r\n    this.clearSelectionWord = this.clearSelectionWord.bind(this)\r\n    this.resetSelectedCells = this.resetSelectedCells.bind(this)\r\n    this.shuffleCells = this.shuffleCells.bind(this)\r\n  }\r\n  randomLetters() {\r\n    const chars = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\r\n    let letters = []\r\n    for (let i = 0; i < this.state.size; i++) {\r\n      letters[i] = [...Array(parseInt(this.state.size))].map(x => chars[Math.floor(Math.random() * chars.length) | 0]).join('')\r\n    }\r\n    return letters\r\n  }\r\n  handleCellClick(e) {\r\n    let cell = e.target\r\n    let cellName = cell.getAttribute('cell')\r\n    let word = this.state.word\r\n    if (this.state.cellToggle) {\r\n      // cell toggle\r\n      if (word.filter(x => x.cell === cellName).length === 0) {\r\n        this.pushSelectionWord(cell)\r\n      } else {\r\n        word = word.filter(x => x.cell !== cellName)\r\n        this.setState({\r\n          word: word\r\n        })\r\n        cell.classList.toggle('selected')\r\n      }\r\n    } else {\r\n      // word pop\r\n      if (word.filter(x => x.cell === cellName).length === 0) {\r\n        this.pushSelectionWord(cell)\r\n      } else if (word[word.length - 1].cell === cellName) {\r\n        this.popSelectionWord()\r\n      }\r\n    }\r\n  }\r\n  pushSelectionWord(cell) {\r\n    let cellName = cell.getAttribute('cell')\r\n    let word = this.state.word\r\n    word[word.length] = {\r\n      cell: cellName,\r\n      letter: cell.innerHTML\r\n    }\r\n    cell.classList.add('selected')\r\n    this.setState({\r\n      word: word\r\n    })\r\n  }\r\n  popSelectionWord() {\r\n    if (this.state.word.length > 0) {\r\n      let word = this.state.word\r\n      document.querySelectorAll('[cell=' + word[word.length - 1].cell + ']')[0].classList.remove('selected')\r\n      word.length--;\r\n      this.setState({\r\n        word: word\r\n      })\r\n    }\r\n  }\r\n  clearSelectionWord() {\r\n    this.setState({\r\n      word: []\r\n    })\r\n  }\r\n  updateMultiplier(newWordScore) {\r\n    if (this.state.lastWordScore > 1) {\r\n      let lastWordScore = this.state.lastWordScore\r\n      let multiplier = this.state.multiplier\r\n      if (newWordScore > lastWordScore) {\r\n        multiplier++\r\n      } else if (newWordScore < lastWordScore && this.state.multiplier > 1) {\r\n        multiplier--\r\n      }\r\n      this.setState({\r\n        multiplier: multiplier\r\n      })\r\n    }\r\n  }\r\n  updateScore(wordScore) {\r\n    let score = this.state.score\r\n    score += (wordScore * this.state.multiplier)\r\n    this.updateMultiplier(wordScore)\r\n    this.setState({\r\n      score: score,\r\n      lastWordScore: wordScore\r\n    })\r\n  }\r\n  resetSelectedCells() {\r\n    let selectedCells = document.querySelectorAll('[class=\"cell selected\"]')\r\n    selectedCells.forEach(x => x.classList.remove('selected'))\r\n    this.shuffleCells(selectedCells)\r\n  }\r\n  shuffleCells(selectedCells) {\r\n    if (this.state.shuffle) {\r\n      if (this.state.shuffleAll) {\r\n        // shuffle all cells\r\n        this.setState({\r\n          rows: this.randomLetters()\r\n        })\r\n      } else {\r\n        // shuffle only selected cells\r\n        const chars = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\r\n        selectedCells.forEach(x => x.innerHTML = chars[Math.floor(Math.random() * chars.length) | 0])\r\n      }\r\n    }\r\n  }\r\n  submitWord() {\r\n    let word = this.state.word.map(x => x.letter).join('').toLowerCase();\r\n    spellcheck.get('?text=' + word)\r\n    .then(function (response) {\r\n      if (response.data.corrections[word] === undefined) {\r\n        this.updateScore(word.length)\r\n        this.clearSelectionWord()\r\n        this.resetSelectedCells()\r\n      } else {\r\n        document.getElementById('selection').classList.add('shake')\r\n        setTimeout(() => {\r\n          document.getElementById('selection').classList.remove('shake')\r\n        }, 1000);\r\n      }\r\n    }.bind(this))\r\n    .catch(function (error) {\r\n      console.log(error)\r\n    })\r\n    .finally(function () {\r\n      // always executed\r\n    });\r\n  }\r\n  handleKeyUp(e) {\r\n    switch (e.keyCode) {\r\n      // backspace key to undo\r\n      case 8:\r\n        e.preventDefault()\r\n        this.popSelectionWord()\r\n        break;\r\n      // return or enter key to submit\r\n      case 13:\r\n        e.preventDefault()\r\n        this.submitWord()\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"keyup\", this.handleKeyUp)\r\n    if (this.props.generate) {\r\n      this.setState({\r\n        rows: this.randomLetters()\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    let rows = []\r\n    for (let i = 0; i < this.state.size; i++) {\r\n      rows[i] = <Row\r\n        key={i.toString()}\r\n        rowNumber={i}\r\n        size={this.state.size}\r\n        letters={this.state.rows[i]}\r\n        onClick={this.handleCellClick} />\r\n    }\r\n    return (\r\n      <div className=\"grid\">\r\n        <Score score={this.state.score} />\r\n        <Selection word={this.state.word.map(x => x.letter)} />\r\n        <div className=\"rows\">\r\n          {rows}\r\n        </div>\r\n        <Sidebar multiplier={this.state.multiplier} endless={this.state.endless} handleUndoButtonClick={this.popSelectionWord} handleSubmitButtonClick={this.submitWord} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGrid.defaultProps = {\r\n  generate: true,\r\n  cellToggle: false,\r\n  shuffle: true,\r\n  shuffleAll: true,\r\n  size: 5,\r\n  rows: [\r\n    'TAP',\r\n    'WORD',\r\n    'GAME',\r\n    'BY',\r\n    'TUNJI',\r\n  ],\r\n  multiplier: 1,\r\n  endless: false,\r\n  score: 0,\r\n  lastWordScore: 0,\r\n  word: [] // { cell: '', letter: ''} cell is short for cellName\r\n}\r\n\r\nexport default Grid;\r\n","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Grid cellToggle={true} shuffle={true} shuffleAll={true} endless={true} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}